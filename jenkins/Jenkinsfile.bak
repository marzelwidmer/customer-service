def shortCommitId (){
    // Get first 6 char. of SHA1 token and use it to retrieve the image docker builds:
    sh 'git rev-parse HEAD > GIT_COMMIT'
    return readFile('GIT_COMMIT').take(6)
}
def commitUserNameByCommitId(String shortCommitId){
    // Get git commit author from commit
    sh 'git --no-pager show -s --format=\'%an <%ae>\' ${shortCommitId} > GIT_COMMIT_USERNAME'
    return readFile('GIT_COMMIT_USERNAME')
}

//void gitTag(Version releaseVersion) {
//    sshagent(['devops_deploy_DEV']) {
//        shell 'git tag -d \$(git tag)'
//        shell 'git fetch --tags'
//        echo "New release version ${releaseVersion.normalVersion}"
//        shell "git tag -fa ${releaseVersion.normalVersion} -m 'Release version ${releaseVersion.normalVersion}'"
//    }
//}

void foo(String project){

     openshift.withCluster() {
        openshift.withProject(project) {


            def appName = "customer-service"
            def deployedVer = openshift.selector('dc', appName).object().status.latestVersion //(1)
            def buildNumber = env.BUILD_NUMBER
            def shortCommitId = shortCommitId()
            def commitUserName = commitUserNameByCommitId(shortCommitId)

            println "Deployment Version: ${deployedVer}"
            println "Build Version: ${buildNumber}"
            println "Git revision:  ${shortCommitId}"
            println "Git commit user:  ${commitUserName}"




//            env.VERSION = ver
//            openshift.tag("${appName}:latest", "${appName}:v${ver}-${env.BUILD_NUMBER}")
//
//            def dcNew = openshift.newApp("--image-stream=development/${appName}:${ver}", "--name=${appName}-v${ver}").narrow('dc') //(3)
//            def verNew = dcNew.object().status.latestVersion
//            println "New deployment: ${verNew}"
//            def rc = openshift.selector('rc', "${appName}-v${ver}-1")
//            timeout(5) { //(4)
//            rc.untilEach(1) {
//              def rcMap = it.object()
//                  return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
//              }
//            }
        }
    }
}
//void sshagent(credentials: [GITHUB_TOKEN]) {
//    sh("git remote set-url origin https://github.com/marzelwidmer/customer-service.git")
//    sh("git tag --force ${buildVersion}")
//    sh("git push --force origin ${buildVersion}")
//}

pipeline {
    agent {
       label 'maven'
    }
    stages {
//        stage("Checkout"){
//            steps{
                // GIT submodule recursive checkout
//                checkout scm: [
//                        $class: 'GitSCM',
//                        branches: scm.branches,
//                        doGenerateSubmoduleConfigurations: false,
//                        extensions: [[$class: 'SubmoduleOption',
//                                      disableSubmodules: false,
//                                      parentCredentials: false,
//                                      recursiveSubmodules: true,
//                                      reference: '',
//                                      trackingSubmodules: false]],
//                        submoduleCfg: [],
//                        userRemoteConfigs: scm.userRemoteConfigs
//                ]
//                checkout([$class: 'GitSCM',
//                          branches: [[name: '*/master']],
//                          doGenerateSubmoduleConfigurations: false,
//                          extensions: [],
//                          submoduleCfg: [],
//                          userRemoteConfigs: [[credentialsId: $GITHUB_TOKEN, url: 'https://$GITHUB_TOKEN@github.com/marzelwidmer/customer-service.git']]])

//                sh '''
//                    echo $GITHUB_TOKEN
//
//                    git clone https://$GITHUB_TOKEN@github.com/marzelwidmer/customer-service.git
//
//                    '''
//            }
//        }

//        stage ('Deploy') {
//            steps{
//                sshagent(credentials : ['use-the-id-from-credential-generated-by-jenkins']) {
//                    sh 'ssh -o StrictHostKeyChecking=no user@hostname.com uptime'
//                    sh 'ssh -v user@hostname.com'
//                    sh 'scp ./source/filename user@hostname.com:/remotehost/target'
//                }
//            }
//        }

        stage('validate') {
            steps {
//                # git clone https://$GITHUB_TOKEN@github.com/marzelwidmer/customer-service.git
//                withCredentials([usernameColonPassword(credentialsId: 'marzelwidmer', variable: env.GITHUB_TOKEN)]) {
//                    sh("git remote set-url origin https://github.com/marzelwidmer/customer-service.git")
//                    sh("git tag --force build-${env.BRANCH_NAME}")
//                    sh("git push --force origin build-${env.BRANCH_NAME}")
//                }
//                sshAgent(credentials: [env.GITHUB_TOKEN]) {
//                    def repository = "git@" + env.GIT_URL.replaceFirst(".+://", "").replaceFirst("/", ":")
//                    sh("git remote set-url origin https://github.com/marz   elwidmer/customer-service.git")
//                  /  sh("git tag --force build-${env.BRANCH_NAME}")
//                    sh("git push --force origin build-${env.BRANCH_NAME}")
//                }
                script {

                    openshift.withCluster() {
                        openshift.withProject("development") {

                            def clusterUrl = openshift.cluster();
                            def buildNumber = env.BUILD_NUMBER
                            def branchName = env.GIT_BRANCH
                            def shortCommitId = shortCommitId()
                            def commitUserName = commitUserNameByCommitId(shortCommitId)


                            println "Now using cluster with url ${clusterUrl}"
                            println "Branch Name: ${branchName}"
                            println "Build Version: ${buildNumber}"
                            println "Git revision:  ${shortCommitId}"
                            println "Git commit user:  ${commitUserName}"

                            def  buildVersion = "${branchName}_${shortCommitId}_${buildNumber}".split("/")[1]

                            println "Next tag version:  ${buildVersion}"
                            env.nextVersion = buildVersion

                            sh "git config --global push.default simple"
                            sh "git config --global user.email 'jenkins@c3smonkey.ch'"
                            sh "git config --global user.name 'Jenkins CI/CD'"
                            sh "git config -l"

                            def  GITHUB_TOKEN = "c6d87a6aff996560b1d9a00ae684bd8bd36c9c92"




//                            sh "oc get secrets user-at-github -o yaml"
//                            sh "git fetch --all"
//                            sh "git push origin master"
                            sh "git tag -a -m 'release ${env.nextVersion}' ${env.nextVersion}"
//                            sh "git tag -l"
//
//
//                            sh "git remote add ci https://${GITHUB_TOKEN}:x-oauth-basic@github.com/marzelwidmer/customer-service.git"
//                            sh "git push --set-upstream ci:master master"
//                            sh "git push ci:master"
//                            sh "git remote set-url ci https://${GITHUB_TOKEN}:x-oauth-basic@github.com/marzelwidmer/customer-service.git"
//                            sh "git push --set-upstream ci:master HEAD:master --follow-tags"

                            sh "git push origin HEAD:master"
//                            sh "git push --follow-tags"
//                            sh "git push --follow-tags origin master"

//                            env.someVar='someVal'
//                            sh "echo  ${env.someVar}"


//                            def testVar='buildVersion'
//                            sh "echo $testVar"

//                            sh '''
//                                 echo $buildVersion
//                                # git tag --force ${buildVersion}"
//
//                                 #git log --pretty=oneline | wc -l
//                                 #git log --pretty=format:"<entry><author>%an</author><commit_date>%cd</commit_date><message_body>%b</message_body></entry>"
//
//                               '''

                        }
                    }
                }



//                withCredentials([usernamePassword(credentialsId: ‘github-token_jenkins’, passwordVariable: ‘password_name’, usernameVariable: ‘git_username’)]) {
//                    sh “””
//                    curl — data ‘{
//                        “tag_name”: “${result}”,
//                        “target_commitish”: “release”,
//                        “name”: “${result}”,
//                        “body”: “Release of version ${result}”,
//                        “draft”: false, “prerelease”: false}’ \ https://github.com/api/v3/repos/project/repo/releases?access_token=${password_name}
//                }

                sh '''
                         
                   '''



//                sh '''
//                    ./mvnw validate
//                    git log --pretty=oneline | wc -l
//                    git config --global push.default matching
//                    git config --global user.email "jenkins@c3smonkey.ch"
//                    git config --global user.name "Jenkins CI/CD"
//                    git tag -a -m "release 0.0.0, additionnal reason"  build_0.0.0
//                    git push --follow-tags origin master
//                   '''
//



//                    git remote add upstream https://$GITHUB_TOKEN:x-oauth-basic@github.com/marzelwidmer/customer-service.git
//                    git remote set-url upstream https://$GITHUB_TOKEN:x-oauth-basic@github.com/marzelwidmer/customer-service.git
//
//                    git tag -a -m "release 0.0.0, additionnal reason"  build_0.0.0
//                    git push --follow-tags upstream master
//
//
//                    # echo $GITHUB_TOKEN
//                    # git remote add upstream https://$GITHUB_TOKEN:x-oauth-basic@github.com/marzelwidmer/customer-service.git
//                    # git remote set-url upstream https://$GITHUB_TOKEN:x-oauth-basic@github.com/marzelwidmer/customer-service.git
//                    # git log --pretty=oneline | wc -l
//                    # git tag  build_"0.0.0"
//                    # git config --global push.default matching
//                    # git remote -v
//                    $ git push upstream --follow-tags
//
//                 '''
                sh './semver.sh'
            }
        }
        stage('build application') {
            steps {
                sh './mvnw clean package -DskipTests'
            }
        }
        stage('run tests') {
            steps {
                sh './mvnw test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }


        stage('deploy in development ?') {
            steps {
                script {
                    foo("development")
                }
                timeout(time: 2, unit: 'DAYS') {
                    input 'Approve to Development'
                }
            }
        }

        stage('deploy in development') {
            steps {
                sh './mvnw fabric8:deploy -DskipTests -Dfabric8.namespace=development'
            }
        }
        stage('verify deploy in development') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshiftVerifyDeployment(namespace: 'development',
                                depCfg: project,
                                replicaCount:'1',
                                verifyReplicaCount: 'true',
                                waitTime: '300000')
                        }
                    }
                }
            }
        }
        stage('tag image latest to promoteQA') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                         openshiftTag(namespace: 'development',
                            sourceStream: project,
                            sourceTag: 'latest',
                            destinationStream: project,
                            destinationTag: 'promoteQA')
                        }
                    }
                }
            }
        }
        stage('deploy in testing') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshiftDeploy(namespace: 'testing',
                                deploymentConfig: project,
                                waitTime: '300000')
                        }
                    }
                }
            }
        }
        stage('scale pod in testing to 2 replicas') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshiftScale(namespace: 'testing',
                            deploymentConfig: project,
 			                waitTime: '300000',
 			                replicaCount: '2')
                        }
                    }
                }
            }
        }
        stage('verify deploy in testing') {
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject() {
                            openshiftVerifyDeployment(namespace: 'testing',
        				       depCfg: project,
        				       replicaCount:'2',
        				       verifyReplicaCount: 'true',
        				       waitTime: '300000')
                        }
                    }
                }
            }
        }
        stage('approval') {
            steps {
                timeout(time: 2, unit: 'DAYS') {
                            input 'Approve to Development'
                }
            }
        }
    }
}




// // def APPLICATION_SOURCE_REPO = "https://github.com/marzelwidmer/catalog-service.git"
// // def APPLICATION_SOURCE_REF = "  master"
//
// pipeline {  //https://dzone.com/articles/continuous-delivery-with-openshift-and-jenkins-ab
//   // workspace
//   agent {
//     label 'maven'
//   }
//   // Pipeline Stages start here
//   // Requeres at least one stage
//   stages {
//     stage('Deploy Previous Version') {
//       steps {
//         script {
//           openshift.withCluster() {
//             openshift.withProject() {
//                 stage('Checkout')
//                 checkout scm
//
//                 stage('Compile')
//                 sh './mvnw -B clean compile'
//
//
// //                 def ver = openshift.selector('dc', appName).object().status.latestVersion
// //                 println "Version: ${ver}"
// //
// //                 env.VERSION = ver
// //                 openshift.tag("${appName}:latest", "${appName}:${ver}")
// //
// //                 def dcNew = openshift.newApp("--image-stream=development/${appName}:${ver}", "--name=${appName}-v${ver}").narrow('dc')
// //                 def verNew = dcNew.object().status.latestVersion
// //                 println "New deployment: ${verNew}"
// //                 def rc = openshift.selector('rc', "${appName}-v${ver}-1")
// //                 timeout(5) {
// //                 rc.untilEach(1) {
// //                   def rcMap = it.object()
// //                       return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
// //                   }
// //                 }
//
//
//
// //   // 1
// //     try {
// //         // 2
// //         stage('Checkout')
// //         checkout scm
// //         // 4
// //         stage('Compile')
// //         sh 'mvn -B clean compile'
// //
// //         // 5
// //           stage('Compile')
// //         sh 'mvn -B test'
// //
// //         // 6
// //         stage('Package (Install)')
// //         sh 'mvn -B install fabric8:resource fabric8:build -DskipTests'
// //
// //         withCredentials([usernamePassword(credentialsId: 'depusr-nafiux-${artifactId}', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
// //
// //             // 7
// //             stage('Push to ECR')
// //             sh 'mvn -B fabric8:push'
// //
// //             // 8
// //             stage('Deploy dev: Cloudformation')
// //             sh "(aws cloudformation deploy --region us-east-1 --template-file cloudformation.json --stack-name cf-nafiux-${artifactId}-dev --parameter-overrides Env=dev) || true"
// //         }
// //
// //         // 9
// //         stage('Deploy dev: Docker microservice')
// //         sh 'mvn -B fabric8:apply'
// //
// //         // 10
// //         stage('Integration tests')
// //         sh 'mvn -B verify -DskipUTs -DsvcEndpoint=https://svc.dev.apps.foo.bar -Djavax.net.ssl.trustStore=`pwd`/${artifactId}-it/src/test/resources/test-dev.keystore'
// //
// //         // 11
// //         stage('Release')
// //         sh 'mvn -B release:prepare release:perform -Darguments="-DskipTests"'
// //
// //         // 12
// //         slackSend color: "#00FF00", message: "Build finished: http://ci.foo.net/job/${env.JOB_NAME}/${env.BUILD_NUMBER}\nHealthcheck: https://svc.dev.apps.foo.bar/api/${shortName}/v1/healthcheck"
// //
// //     } catch (e) {
// //
// //         //13
// //         slackSend color: "#FF0000", message: "Build failed: http://ci.foo.net/job/${env.JOB_NAME}/${env.BUILD_NUMBER}/console ${e.message}"
// //         error(e.message)
// //     }
//
//
//             }
//           }
//         }
//       }
//     }
//   }
// }
//
//
//
// // pipeline {
// //   // Use Jenkins Maven slave
// //   // Jenkins will dynamically provision this as OpenShift Pod
// //   // All the stages and steps of this Pipeline will be executed on this Pod
// //   // After Pipeline completes the Pod is killed so every run will have clean
// //   // workspace
// //   agent {
// //     label 'maven'
// //   }
// //    // Pipeline Stages start here
// //   // Requeres at least one stage
// //   stages {
// //     stage('Deploy Previous') {
// //       steps {
// //         script {
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //
// //                   openshiftDeploy(namespace: 'testing',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000')
// //
// //                   openshiftScale(namespace: 'testing',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000',
// //                                  replicaCount: '2')
// //
// //                   stage 'verify deploy in test'
// //                   openshiftVerifyDeployment(namespace: 'testing',
// //                                        depCfg: project,
// //                                        replicaCount:'2',
// //                                        verifyReplicaCount: 'true',
// //                                        waitTime: '300000')
// //
// //                   stage 'Deploy to production'
// //                   timeout(time: 2, unit: 'DAYS') {
// //                       input message: 'Approve to production?'
// //                   }
// //
// //                   openshiftTag(namespace: 'development',
// //                               sourceStream: project,
// //                               sourceTag: 'promoteQA',
// //                               destinationStream: project,
// //                               destinationTag: 'promotePRD')
// //
// //
// //                   openshiftDeploy(namespace: 'production',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000')
// //
// //                   openshiftScale(namespace: 'production',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000',
// //                                  replicaCount: '2')
// //
// //                   stage 'verify deploy in production'
// //                   openshiftVerifyDeployment(namespace: 'production',
// //                                        depCfg: project,
// //                                        replicaCount:'2',
// //                                        verifyReplicaCount: 'true',
// //                                        waitTime: '300000')
// //             }
// //           }
// //         }
// //       }
// //     }
// //   }
// //    // Post Stuff
// //    post {
// //         always {
// //         echo 'This will always run'
// //    }
// //    success {
// //         echo 'This will run only if successful'
// //    }
// //    failure {
// //         echo 'This will run only if failed'
// //    }
// //    unstable {
// //         echo 'This will run only if the run was marked as unstable'
// //    }
// //    changed {
// //         echo 'This will run only if the state of the Pipeline has changed'
// //         echo 'For example, if the Pipeline was previously failing but is now successful'
// //    }
// //   }
// // }
//
//
//
//
//
//
// // $ oc new-app fabric8/s2i-java~https://github.com/marzelwidmer/catalog-service.git --name catalog-service
// // $ oc expose svccatalog-service
// // oc start-build bc/catalog-service \
// // --from-file=./target/catalog-service-0.0.1.jar \
// // --follow
//
//
// // def project="catalog-service"
// // def appName="catalog-service"
// // def dev_project="development"
// // def test_project="[USER]-pipeline-test"
// // def prod_project="[USER]-pipeline-prod"
// //
// // pipeline {
// //   // Use Jenkins Maven slave
// //   // Jenkins will dynamically provision this as OpenShift Pod
// //   // All the stages and steps of this Pipeline will be executed on this Pod
// //   // After Pipeline completes the Pod is killed so every run will have clean
// //   // workspace
// //   agent {
// //     label 'maven'
// //   }
// //    // Pipeline Stages start here
// //   // Requeres at least one stage
// //   stages {
// //     stage('Deploy Previous') {
// //       steps {
// //         script {
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //
// //                   stage 'Foo Bar'
// //                   openshift.withProject(dev_project) {
// //                         def ver = openshift.selector('dc', appName).object().status.latestVersion //(1)
// //                         println "Version: ${ver}"
// //
// //                         env.VERSION = ver++
// //                         openshift.tag("${appName}:latest", "${appName}:${ver}") //(2)
// //
// // //                          def verNext = ver++
// // //                          openshift.tag("${appName}:latest", "${appName}:v${verNext}") // foobar
// //
// //                             def dcNew = openshift.newApp("--image-stream=development/${appName}:${ver}", "--name=${appName}-v${ver}").narrow('dc') //(3)
// //                             def verNew = dcNew.object().status.latestVersion
// //                             println "New deployment: ${verNew}"
// //                             def rc = openshift.selector('rc', "${appName}-v${ver}-1")
// //                             timeout(5) { //(4)
// //                             rc.untilEach(1) {
// //                               def rcMap = it.object()
// //                                   return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
// //                               }
// //                             }
// //                   }
// //
// //
// //
// //                   stage 'build & deploy in dev'
// //                   openshiftBuild(namespace: 'development',
// //                         buildConfig: project,
// //                             showBuildLogs: 'true',
// //                         waitTime: '3000000')
// //
// //                   stage 'verify deploy in dev'
// //                   openshiftVerifyDeployment(namespace: 'development',
// //                         depCfg: project,
// //                         replicaCount:'1',
// //                         verifyReplicaCount: 'true',
// //                         waitTime: '300000')
// //
// //                   stage 'deploy in test'
// //                   openshiftTag(namespace: 'development',
// //                         sourceStream: project,
// //                         sourceTag: 'latest',
// //                         destinationStream: project,
// //                         destinationTag: 'promoteQA')
//
//
// //                   openshiftDeploy(namespace: 'testing',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000')
// //
// //                   openshiftScale(namespace: 'testing',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000',
// //                                  replicaCount: '2')
// //
// //                   stage 'verify deploy in test'
// //                   openshiftVerifyDeployment(namespace: 'testing',
// //                                        depCfg: project,
// //                                        replicaCount:'2',
// //                                        verifyReplicaCount: 'true',
// //                                        waitTime: '300000')
// //
// //                   stage 'Deploy to production'
// //                   timeout(time: 2, unit: 'DAYS') {
// //                       input message: 'Approve to production?'
// //                   }
// //
// //                   openshiftTag(namespace: 'development',
// //                               sourceStream: project,
// //                               sourceTag: 'promoteQA',
// //                               destinationStream: project,
// //                               destinationTag: 'promotePRD')
// //
// //
// //                   openshiftDeploy(namespace: 'production',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000')
// //
// //                   openshiftScale(namespace: 'production',
// //                                  deploymentConfig: project,
// //                                  waitTime: '300000',
// //                                  replicaCount: '2')
// //
// //                   stage 'verify deploy in production'
// //                   openshiftVerifyDeployment(namespace: 'production',
// //                                        depCfg: project,
// //                                        replicaCount:'2',
// //                                        verifyReplicaCount: 'true',
// //                                        waitTime: '300000')
//
// //             }
// //           }
// //         }
// //       }
// //     }
// //   }
// //
// //    // Post Stuff
// //    post {
// //         always {
// //         echo 'This will always run'
// //    }
// //    success {
// //         echo 'This will run only if successful'
// //    }
// //    failure {
// //         echo 'This will run only if failed'
// //    }
// //    unstable {
// //         echo 'This will run only if the run was marked as unstable'
// //    }
// //    changed {
// //         echo 'This will run only if the state of the Pipeline has changed'
// //         echo 'For example, if the Pipeline was previously failing but is now successful'
// //    }
// //   }
// // }
//
//
//
//
//
//
// // pipeline {
// //   // Use Jenkins Maven slave
// //   // Jenkins will dynamically provision this as OpenShift Pod
// //   // All the stages and steps of this Pipeline will be executed on this Pod
// //   // After Pipeline completes the Pod is killed so every run will have clean
// //   // workspace
// //   agent {
// //     label 'maven'
// //   }
// //
// //    // Pipeline Stages start here
// //   // Requeres at least one stage
// //   stages {
// //
// //     stage('Deploy Previous') {
// //       steps {
// //         script {
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //               def appName = "catalog-service"
// //               def namespace = "development"
// //               def ver = openshift.selector('dc', appName).object().status.latestVersion //(1)
// //               println "Version: ${ver}"
// //               env.VERSION = ver
// //               openshift.tag("${appName}:latest", "${appName}:${ver}") //(2)
// //               def dcNew = openshift.newApp("--image-stream=piomin-cicd/${appName}:${ver}", "--name=${appName}-v${ver}").narrow('dc') //(3)
// //               def verNew = dcNew.object().status.latestVersion
// //               println "New deployment: ${verNew}"
// //               def rc = openshift.selector('rc', "catalog-service-v${ver}-1")
// //               timeout(5) { //(4)
// //                 rc.untilEach(1) {
// //                   def rcMap = it.object()
// //                   return (rcMap.status.replicas.equals(rcMap.status.readyReplicas))
// //                 }
// //               }
// //             }
// //           }
// //         }
// //       }
// //     }
// //     stage('Build and Deploy Latest') {
// //       steps {
// //         script {
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //               def appName = "catalog-service"
// //               def bc = openshift.selector('bc', appName) //(1)
// //               bc.startBuild() //(2)
// //               def builds = bc.related("builds")
// //               timeout(5) { //(3)
// //                 builds.untilEach(1) {
// //                   return (it.object().status.phase == "Complete")
// //                 }
// //               }
// //             }
// //           }
// //         }
// //       }
// //     }
// //
// //     stage('Set A-B Route') {
// //       steps {
// //         script {
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //               def route = openshift.selector("routes", "catalog-service") //(1)
// //               println "Route: ${route}"
// //               def routeObj = route.object()
// //               println "Route: ${routeObj}"
// //               routeObj.spec.alternateBackends = []
// //               routeObj.spec.alternateBackends[0] = ["kind": "Service","name": "catalog-service-v${env.VERSION}", "weight": 100] //(2)
// //               openshift.apply(routeObj) //(3)
// //             }
// //           }
// //         }
// //       }
// //     }
// //
// //     stage('Disabling A/B Testing') {
// //       steps {
// //         script {
// //           input message: "Continue ?" //(1)
// //           openshift.withCluster() {
// //             openshift.withProject() {
// //               def route = openshift.selector("routes", "catalog-service") //(2)
// //               println "Route: ${route}"
// //               def routeObj = route.object()
// //               println "Route: ${routeObj}"
// //               routeObj.spec.alternateBackends = null //(3)
// //               openshift.apply(routeObj) //(4)
// //               openshift.selector("dc", "catalog-service-${env.VERSION}").delete() //(5)
// //             }
// //           }
// //         }
// //       }
// //     }
// //    }
// // }
//
//
//
//
//
// // retriever: modernSCM(
// //   [
// //     $class: "GitSCMSource",
// //     remote: "https://github.com/marzelwidmer/catalog-service.git"
// //   ]
// // )
// //
// // openshift.withCluster() {
// //   env.NAMESPACE = openshift.project()
// //   env.POM_FILE = env.BUILD_CONTEXT_DIR ? "${env.BUILD_CONTEXT_DIR}/pom.xml" : "pom.xml"
// //   env.APP_NAME = "${JOB_NAME}".replaceAll(/-build.*/, '')
// //   echo "Starting Pipeline for ${APP_NAME}..."
// //   env.BUILD = "${env.NAMESPACE}"
// //   env.DEV = "${APP_NAME}-dev"
// //   env.STAGE = "${APP_NAME}-stage"
// //   env.PROD = "${APP_NAME}-prod"
// // }
// //
// // def APPLICATION_SOURCE_REPO = "https://github.com/marzelwidmer/catalog-service.git"
// // def APPLICATION_SOURCE_REF = "  master"
// //
// // pipeline {
// //   // Use Jenkins Maven slave
// //   // Jenkins will dynamically provision this as OpenShift Pod
// //   // All the stages and steps of this Pipeline will be executed on this Pod
// //   // After Pipeline completes the Pod is killed so every run will have clean
// //   // workspace
// //   agent {
// //     label 'maven'
// //   }
// //
// //   // Pipeline Stages start here
// //   // Requeres at least one stage
// //   stages {
// //
// //     // Checkout source code
// //     // This is required as Pipeline code is originally checkedout to
// //     // Jenkins Master but this will also pull this same code to this slave
// //     stage('Git Checkout') {
// //       steps {
// //         // Turn off Git's SSL cert check, uncomment if needed
// //         // sh 'git config --global http.sslVerify false'
// //         git url: "${APPLICATION_SOURCE_REPO}", branch: "${APPLICATION_SOURCE_REF}"
// //       }
// //     }
// //
// //     // Run Maven build, skipping tests
// //     stage('Build'){
// //       steps {
// //         sh "mvn -B clean package -DskipTests=true -f ${POM_FILE}"
// //       }
// //     }
// //
// //     // Run Maven unit tests
// //     stage('Unit Test'){
// //       steps {
// //         sh "mvn -B test -f ${POM_FILE}"
// //       }
// //     }
// //
// //     // Build Container Image using the artifacts produced in previous stages
// //     stage('Build Container Image'){
// //       steps {
// //         // Copy the resulting artifacts into common directory
// //         sh """
// //           ls target/*
// //           rm -rf oc-build && mkdir -p oc-build/deployments
// //           for t in \$(echo "jar;war;ear" | tr ";" "\\n"); do
// //             cp -rfv ./target/*.\$t oc-build/deployments/ 2> /dev/null || echo "No \$t files"
// //           done
// //         """
// //
// //         // Build container image using local Openshift cluster
// //         // Giving all the artifacts to OpenShift Binary Build
// //         // This places your artifacts into right location inside your S2I image
// //         // if the S2I image supports it.
// //         binaryBuild(projectName: env.BUILD, buildConfigName: env.APP_NAME, buildFromPath: "oc-build")
// //       }
// //     }
// //
// //     stage('Promote from Build to Dev') {
// //       steps {
// //         tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.BUILD, toImagePath: env.DEV)
// //       }
// //     }
// //
// //     stage ('Verify Deployment to Dev') {
// //       steps {
// //         verifyDeployment(projectName: env.DEV, targetApp: env.APP_NAME)
// //       }
// //     }
// //
// //     stage('Promote from Dev to Stage') {
// //       steps {
// //         tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.DEV, toImagePath: env.STAGE)
// //       }
// //     }
// //
// //     stage ('Verify Deployment to Stage') {
// //       steps {
// //         verifyDeployment(projectName: env.STAGE, targetApp: env.APP_NAME)
// //       }
// //     }
// //
// //     stage('Promotion gate') {
// //       steps {
// //         script {
// //           input message: 'Promote application to Production?'
// //         }
// //       }
// //     }
// //
// //     stage('Promote from Stage to Prod') {
// //       steps {
// //         tagImage(sourceImageName: env.APP_NAME, sourceImagePath: env.STAGE, toImagePath: env.PROD)
// //       }
// //     }
// //
// //     stage ('Verify Deployment to Prod') {
// //       steps {
// //         verifyDeployment(projectName: env.PROD, targetApp: env.APP_NAME)
// //       }
// //     }
// //   }
// // }
//
//
//
//
//
// // job('catalog-service') {
// //
// //     configure { project ->
// //         project / 'customWorkspace' << '${JENKINS_HOME}/workspace/CATALOG_SERVICE_DSL'
// //     }
// //
// //     scm {
// //         git('https://github.com/marzelwidmer/catalog-service.git')
// //     }
// //
// //
// //     steps {
// //         maven('-e clean package')
// //
// //
// // //         oc new-app fabric8/s2i-java:latest-java11~https://github.com/marzelwidmer/catalog-service.git; oc expose svc/catalog-service; oc get route catalog-service
// // //         shell('oc new-app fabric8/s2i-java:latest-java11~/tmp/nocontent --name=catalog-service')
// // //         shell('oc start-build catalog-service --from-file=Presentation/target/ROOT.war')
// // //         shell('oc expose service presentation --hostname=msa.example.com')
// //
// //     }
// // }
// //
// // job('CATALOG_SERVICE_DSLL_redeploy_catalog_service') {
// //     configure { project ->
// //         project / 'customWorkspace' << '${JENKINS_HOME}/workspace/CATALOG_SERVICE_DSL'
// //     }
// //
// //
// //     scm {
// //         git('https://github.com/marzelwidmer/catalog-service.git')
// //     }
// //
// //     steps {
// //         maven('-e clean package')
// // //         shell('oc start-build billing-service --from-file=Billing/target/billing.war')
// //     }
// // }
//
//
// // job('MSA_DSL_redeploy_product') {
// //     configure { project ->
// //         project / 'customWorkspace' << '${JENKINS_HOME}/workspace/MSA_DSL'
// //     }
// //
// //
// //     scm {
// //         git('git://github.com/RHsyseng/MSA-EAP7-OSE.git')
// //     }
// //
// //     steps {
// //         maven('-e clean package')
// //         shell('mkdir Product/target/deploy')
// //         shell('cp Product/target/product.war Product/target/deploy')
// //         shell('cp -r Product/configuration Product/target/deploy')
// //         shell('oc start-build product-service --from-dir=Product/target/deploy')
// //
// //     }
// // }
// //
// //
// // job('MSA_DSL_redeploy_sales') {
// //     configure { project ->
// //         project / 'customWorkspace' << '${JENKINS_HOME}/workspace/MSA_DSL'
// //     }
// //
// //
// //     scm {
// //         git('git://github.com/RHsyseng/MSA-EAP7-OSE.git')
// //     }
// //
// //     steps {
// //         maven('-e clean package')
// //         shell('mkdir Sales/target/deploy')
// //         shell('cp Sales/target/sales.war Sales/target/deploy')
// //         shell('cp -r Sales/configuration Sales/target/deploy')
// //         shell('oc start-build sales-service --from-dir=Sales/target/deploy')
// //     }
// // }
//
// // job('MSA_DSL_redeploy_presentation') {
// //     configure { project ->
// //         project / 'customWorkspace' << '${JENKINS_HOME}/workspace/MSA_DSL'
// //     }
// //
// //
// //     scm {
// //         git('git://github.com/RHsyseng/MSA-EAP7-OSE.git')
// //     }
// //
// //     steps {
// //         maven('-e clean package')
// //         shell('oc start-build presentation --from-file=Presentation/target/ROOT.war')
// //     }
// // }
//
//
//
// // def project=""
// // def application="catalog-service"
// // def dev_project="development"
// // def test_project="testing"
// // def prod_project="production"
// // node {
// //     stage('Init') {
// //         project = env.PROJECT_NAME
// //     }
// //     stage('Build') {
// //         echo "Build"
// //         openshift.withCluster() {
// //             openshift.withProject() {
// //                 def builds = openshift.startBuild("$application")
// //                 builds.logs('-f')
// //                 timeout(5) {
// //                     builds.untilEach(1) {
// //                     return (it.object().status.phase == "Complete")
// //                     }
// //                 }
// //             }
// //         }
// //     }
// //     stage('Test') {
// //         echo "Test"
// //         sleep 2
// //     }
// // }
// // node ('maven') {
// //     stage('DeployDev') {
// //         echo "Deploy to $dev_project"
// //         openshift.withCluster() {
// //             openshift.withProject() {
// //                 // Tag the latest image to be used in dev stage
// //                 openshift.tag("$project/$application:latest", "$project/$application:$dev_project")
// //             }
// //             openshift.withProject(dev_project) {
// //                 // trigger Deployment in dev project
// //                 def dc = openshift.selector('dc', "$application")
// //                 dc.rollout().status()
// //             }
// //         }
// //     }
// //     stage('PromoteTest') {
// //         echo "Deploy to $test_project"
// //         openshift.withCluster() {
// //             openshift.withProject() {
// //                 // Tag the dev image to be used in test stage
// //                 openshift.tag("$project/$application:$dev_project", "$project/$application:$test_project")
// //             }
// //             openshift.withProject(test_project) {
// //                 // trigger Deployment in test project
// //                 def dc = openshift.selector('dc', "$application")
// //                 dc.rollout().status()
// //             }
// //         }
// //     }
// //     stage('PromoteProd') {
// //         echo "Deploy to $prod_project"
// //         openshift.withCluster() {
// //             openshift.withProject() {
// //                 // Tag the test image to be used in prod stage
// //                 openshift.tag("$project/$application:$test_project", "$project/$application:$prod_project")
// //             }
// //             openshift.withProject(prod_project) {
// //                 // trigger Deployment in prod project
// //                 def dc = openshift.selector('dc', "$application")
// //                 dc.rollout().status()
// //             }
// //         }
// //     }
// // }
// //
// // //  oc new-app fabric8/s2i-java:latest-java11~https://github.com/marzelwidmer/catalog-service.git; oc expose svc/catalog-service; oc get route catalog-service
// //
// //
// // // def project="catalog-service"
// // //
// // // node('maven') {
// // //   stage 'build & deploy in dev'
// // //   openshiftBuild(namespace: 'development',
// // //   			    buildConfig: ${project},
// // // 			    showBuildLogs: 'true',
// // // 			    waitTime: '3000000')
// // //
// // //   stage 'verify deploy in dev'
// // //   openshiftVerifyDeployment(namespace: 'development',
// // // 				       depCfg: ${project},
// // // 				       replicaCount:'1',
// // // 				       verifyReplicaCount: 'true',
// // // 				       waitTime: '300000')
// // //
// // //   stage 'deploy in test'
// // //   openshiftTag(namespace: 'development',
// // //   			  sourceStream: ${project},
// // // 			  sourceTag: 'latest',
// // // 			  destinationStream: ${project},
// // // 			  destinationTag: 'promoteQA')
// // //
// // //   openshiftDeploy(namespace: 'testing',
// // //   			     deploymentConfig: ${project},
// // // 			     waitTime: '300000')
// // //
// // //   openshiftScale(namespace: 'testing',
// // //   			     deploymentConfig: ${project},
// // // 			     waitTime: '300000',
// // // 			     replicaCount: '2')
// // //
// // //   stage 'verify deploy in test'
// // //   openshiftVerifyDeployment(namespace: 'testing',
// // // 				       depCfg: ${project},
// // // 				       replicaCount:'2',
// // // 				       verifyReplicaCount: 'true',
// // // 				       waitTime: '300000')
// // //
// // //   stage 'Deploy to production'
// // //   timeout(time: 2, unit: 'DAYS') {
// // //       input message: 'Approve to production?'
// // //  }
// // //
// // //   openshiftTag(namespace: 'development',
// // //   			  sourceStream: ${project},
// // // 			  sourceTag: 'promoteQA',
// // // 			  destinationStream: ${project},
// // // 			  destinationTag: 'promotePRD')
// // //
// // //
// // //   openshiftDeploy(namespace: 'production',
// // //   			     deploymentConfig: ${project},
// // // 			     waitTime: '300000')
// // //
// // //   openshiftScale(namespace: 'production',
// // //   			     deploymentConfig: ${project},
// // // 			     waitTime: '300000',
// // // 			     replicaCount: '2')
// // //
// // //   stage 'verify deploy in production'
// // //   openshiftVerifyDeployment(namespace: 'production',
// // // 				       depCfg: ${project},
// // // 				       replicaCount:'2',
// // // 				       verifyReplicaCount: 'true',
// // // 				       waitTime: '300000')
// // // }